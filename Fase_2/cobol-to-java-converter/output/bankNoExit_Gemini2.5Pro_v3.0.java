package com.generated;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Scanner;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.io.IOException;

/**
 * Classe autogenerata per la gestione di conti correnti.
 * Questa classe modella le operazioni di un sistema bancario di base,
 * inclusa l'apertura di conti, depositi, prelievi e la generazione di estratti conto.
 * La logica è derivata da un Abstract Semantic Graph (ASG) e simula le interazioni
 * con un database e l'input dell'utente.
 *
 * @author Generated by ASG-to-Java-Converter
 * @version 1.0
 */
public class GestioneConti {

    // --- Campi Dati Cliente ---

    /**
     * Codice identificativo del cliente.
     */
    private String wsCliCodice;
    /**
     * Nome del cliente.
     */
    private String wsCliNome;
    /**
     * Cognome del cliente.
     */
    private String wsCliCognome;
    /**
     * Codice Fiscale del cliente.
     */
    private String wsCliCf;
    /**
     * Data di nascita del cliente (formato stringa).
     */
    private String wsCliDataNascita;
    /**
     * Indirizzo di residenza del cliente.
     */
    private String wsCliIndirizzo;
    /**
     * Città di residenza del cliente.
     */
    private String wsCliCitta;
    /**
     * CAP di residenza del cliente.
     */
    private String wsCliCap;
    /**
     * Numero di telefono del cliente.
     */
    private String wsCliTelefono;
    /**
     * Indirizzo email del cliente.
     */
    private String wsCliEmail;

    // --- Campi Dati Conto ---

    /**
     * Numero del conto corrente.
     */
    private String wsConNumero;
    /**
     * Codice cliente associato al conto.
     */
    private String wsConCliente;
    /**
     * Tipo di conto (es. 'C' per Corrente, 'D' per Deposito).
     */
    private String wsConTipo;
    /**
     * Saldo attuale del conto.
     */
    private BigDecimal wsConSaldo = BigDecimal.ZERO;
    /**
     * Data di apertura del conto (formato stringa).
     */
    private String wsConDataApertura;
    /**
     * Stato del conto (es. 'A' per Attivo, 'C' per Chiuso).
     */
    private String wsConStato;
    /**
     * Fido concesso sul conto.
     */
    private BigDecimal wsConFido = BigDecimal.ZERO;

    // --- Campi Dati Movimento ---

    /**
     * Data del movimento (formato stringa).
     */
    private String wsMovData;
    /**
     * Tipo di movimento (es. 'D' per Deposito, 'P' per Prelievo).
     */
    private String wsMovTipo;
    /**
     * Importo del movimento.
     */
    private BigDecimal wsMovImporto = BigDecimal.ZERO;
    /**
     * Causale descrittiva del movimento.
     */
    private String wsMovCausale;
    /**
     * Saldo del conto dopo l'esecuzione del movimento.
     */
    private BigDecimal wsMovSaldoDopo = BigDecimal.ZERO;

    // --- Variabili di Lavoro Ausiliarie ---
    // Queste variabili sono dedotte dalla logica dei metodi (es. da statement COBOL)
    // e non erano esplicitamente definite come campi nell'ASG.

    /**
     * Codice di stato SQL per simulare le operazioni sul database. 0 = OK, 100 = Not Found.
     */
    private int sqlcode;
    /**
     * Flag per controllare il ciclo principale dell'applicazione ("S" per continuare).
     */
    private String wsContinua = "S";
    /**
     * Esito di un'operazione, tipicamente 'OK' o 'KO'.
     */
    private String wsEsito;
    /**
     * Variabile per la formattazione degli importi da visualizzare.
     */
    private String wsSaldoEdit;
    /**
     * Variabile temporanea per calcoli di saldo.
     */
    private BigDecimal wsSaldo;
    /**
     * Record/riga da scrivere nel file di report.
     */
    private String reportRecord;

    // --- Oggetti di Utilità ---

    /**
     * Scanner per leggere l'input dell'utente dalla console.
     */
    private final Scanner scanner = new Scanner(System.in);

    // --- Metodi Getter e Setter ---

    /**
     * @return il codice del cliente.
     */
    public String getWsCliCodice() {
        return wsCliCodice;
    }

    /**
     * @param value il codice del cliente da impostare.
     */
    public void setWsCliCodice(String value) {
        this.wsCliCodice = value;
    }

    /**
     * @return il nome del cliente.
     */
    public String getWsCliNome() {
        return wsCliNome;
    }

    /**
     * @param value il nome del cliente da impostare.
     */
    public void setWsCliNome(String value) {
        this.wsCliNome = value;
    }

    /**
     * @return il cognome del cliente.
     */
    public String getWsCliCognome() {
        return wsCliCognome;
    }

    /**
     * @param value il cognome del cliente da impostare.
     */
    public void setWsCliCognome(String value) {
        this.wsCliCognome = value;
    }

    /**
     * @return il codice fiscale del cliente.
     */
    public String getWsCliCf() {
        return wsCliCf;
    }

    /**
     * @param value il codice fiscale del cliente da impostare.
     */
    public void setWsCliCf(String value) {
        this.wsCliCf = value;
    }

    /**
     * @return la data di nascita del cliente.
     */
    public String getWsCliDataNascita() {
        return wsCliDataNascita;
    }

    /**
     * @param value la data di nascita del cliente da impostare.
     */
    public void setWsCliDataNascita(String value) {
        this.wsCliDataNascita = value;
    }

    /**
     * @return l'indirizzo del cliente.
     */
    public String getWsCliIndirizzo() {
        return wsCliIndirizzo;
    }

    /**
     * @param value l'indirizzo del cliente da impostare.
     */
    public void setWsCliIndirizzo(String value) {
        this.wsCliIndirizzo = value;
    }

    /**
     * @return la città del cliente.
     */
    public String getWsCliCitta() {
        return wsCliCitta;
    }

    /**
     * @param value la città del cliente da impostare.
     */
    public void setWsCliCitta(String value) {
        this.wsCliCitta = value;
    }

    /**
     * @return il CAP del cliente.
     */
    public String getWsCliCap() {
        return wsCliCap;
    }

    /**
     * @param value il CAP del cliente da impostare.
     */
    public void setWsCliCap(String value) {
        this.wsCliCap = value;
    }

    /**
     * @return il telefono del cliente.
     */
    public String getWsCliTelefono() {
        return wsCliTelefono;
    }

    /**
     * @param value il telefono del cliente da impostare.
     */
    public void setWsCliTelefono(String value) {
        this.wsCliTelefono = value;
    }

    /**
     * @return l'email del cliente.
     */
    public String getWsCliEmail() {
        return wsCliEmail;
    }

    /**
     * @param value l'email del cliente da impostare.
     */
    public void setWsCliEmail(String value) {
        this.wsCliEmail = value;
    }

    /**
     * @return il numero del conto.
     */
    public String getWsConNumero() {
        return wsConNumero;
    }

    /**
     * @param value il numero del conto da impostare.
     */
    public void setWsConNumero(String value) {
        this.wsConNumero = value;
    }

    /**
     * @return il codice cliente associato al conto.
     */
    public String getWsConCliente() {
        return wsConCliente;
    }

    /**
     * @param value il codice cliente da impostare.
     */
    public void setWsConCliente(String value) {
        this.wsConCliente = value;
    }

    /**
     * @return il tipo di conto.
     */
    public String getWsConTipo() {
        return wsConTipo;
    }

    /**
     * @param value il tipo di conto da impostare.
     */
    public void setWsConTipo(String value) {
        this.wsConTipo = value;
    }

    /**
     * @return il saldo del conto.
     */
    public BigDecimal getWsConSaldo() {
        return wsConSaldo;
    }

    /**
     * @param value il saldo del conto da impostare.
     */
    public void setWsConSaldo(BigDecimal value) {
        this.wsConSaldo = value;
    }

    /**
     * @return la data di apertura del conto.
     */
    public String getWsConDataApertura() {
        return wsConDataApertura;
    }

    /**
     * @param value la data di apertura del conto da impostare.
     */
    public void setWsConDataApertura(String value) {
        this.wsConDataApertura = value;
    }

    /**
     * @return lo stato del conto.
     */
    public String getWsConStato() {
        return wsConStato;
    }

    /**
     * @param value lo stato del conto da impostare.
     */
    public void setWsConStato(String value) {
        this.wsConStato = value;
    }

    /**
     * @return il fido del conto.
     */
    public BigDecimal getWsConFido() {
        return wsConFido;
    }

    /**
     * @param value il fido del conto da impostare.
     */
    public void setWsConFido(BigDecimal value) {
        this.wsConFido = value;
    }

    /**
     * @return la data del movimento.
     */
    public String getWsMovData() {
        return wsMovData;
    }

    /**
     * @param value la data del movimento da impostare.
     */
    public void setWsMovData(String value) {
        this.wsMovData = value;
    }

    /**
     * @return il tipo di movimento.
     */
    public String getWsMovTipo() {
        return wsMovTipo;
    }

    /**
     * @param value il tipo di movimento da impostare.
     */
    public void setWsMovTipo(String value) {
        this.wsMovTipo = value;
    }

    /**
     * @return l'importo del movimento.
     */
    public BigDecimal getWsMovImporto() {
        return wsMovImporto;
    }

    /**
     * @param value l'importo del movimento da impostare.
     */
    public void setWsMovImporto(BigDecimal value) {
        this.wsMovImporto = value;
    }

    /**
     * @return la causale del movimento.
     */
    public String getWsMovCausale() {
        return wsMovCausale;
    }

    /**
     * @param value la causale del movimento da impostare.
     */
    public void setWsMovCausale(String value) {
        this.wsMovCausale = value;
    }

    /**
     * @return il saldo dopo il movimento.
     */
    public BigDecimal getWsMovSaldoDopo() {
        return wsMovSaldoDopo;
    }

    /**
     * @param value il saldo dopo il movimento da impostare.
     */
    public void setWsMovSaldoDopo(BigDecimal value) {
        this.wsMovSaldoDopo = value;
    }

    // --- Metodi Logici ---

    /**
     * Logica principale dell'applicazione. Gestisce il ciclo di vita del menu
     * e delle operazioni fino a quando l'utente non decide di uscire.
     */
    private void mainLogic() {
        connettiDatabase();
        // Ciclo principale dell'applicazione, continua finché l'utente non sceglie di uscire.
        // L'ASG originale conteneva due chiamate a visualizzaMenu, interpretate qui
        // come parte di un ciclo do-while.
        do {
            visualizzaMenu();
            elaboraScelta();
            // Se l'utente non ha scelto di uscire (opzione 0), chiede se continuare.
            if (!wsContinua.equalsIgnoreCase("N")) {
                System.out.println(" ");
                System.out.print("Continuare? (S/N): ");
                wsContinua = scanner.nextLine().toUpperCase();
            }
        } while (wsContinua.equalsIgnoreCase("S"));
        disconnettiDatabase();
        System.exit(0);
    }

    /**
     * Simula la connessione a un database. In un'applicazione reale,
     * questo metodo conterrebbe la logica JDBC per stabilire una connessione.
     */
    private void connettiDatabase() {
        // ASG: execSqlStatement
        // Simulazione: Impostiamo sqlcode a 0 per indicare successo.
        this.sqlcode = 0;
        // ASG: ifStatement (controllo errore)
        if (this.sqlcode != 0) {
            System.out.println("Errore connessione database: " + sqlcode);
            System.exit(0);
        }
        System.out.println("Connessione al database stabilita");
    }

    /**
     * Simula la disconnessione dal database.
     */
    private void disconnettiDatabase() {
        // ASG: execSqlStatement
        System.out.println("Disconnesso dal database");
    }

    /**
     * Visualizza il menu principale delle operazioni e acquisisce la scelta dell'utente.
     */
    private void visualizzaMenu() {
        System.out.println(" ");
        System.out.println("===== SISTEMA GESTIONE CONTI CORRENTI =====");
        System.out.println("1. Apertura nuovo conto");
        System.out.println("2. Deposito");
        System.out.println("3. Prelievo");
        System.out.println("4. Visualizza saldo");
        System.out.println("5. Estratto conto");
        System.out.println("6. Chiusura conto");
        System.out.println("0. Esci");
        System.out.println("===========================================");
        System.out.print("Scelta: ");
        // ASG: acceptStatement
        wsScelta = scanner.nextLine();
    }

    /**
     * Esegue l'azione corrispondente alla scelta dell'utente.
     * Corrisponde a un blocco EVALUATE in COBOL.
     */
    private void elaboraScelta() {
        // ASG: evaluateStatement (switch)
        switch (wsScelta) {
            case "1":
                aperturaConto();
                break;
            case "2":
                deposito();
                break;
            case "3":
                prelievo();
                break;
            case "4":
                visualizzaSaldo();
                break;
            case "5":
                estrattoConto();
                break;
            case "6":
                chiusuraConto();
                break;
            case "0":
                // ASG: moveStatement
                wsContinua = "N";
                break;
            default:
                System.out.println("Scelta non valida!");
                break;
        }
    }

    /**
     * Gestisce la logica per l'apertura di un nuovo conto.
     */
    private void aperturaConto() {
        System.out.println(" ");
        System.out.println("=== APERTURA NUOVO CONTO ===");
        System.out.print("Codice cliente: ");
        wsCliCodice = scanner.nextLine();

        // ASG: execSqlStatement (SELECT su cliente)
        // Simulazione: verifichiamo un cliente fittizio
        if (wsCliCodice.equals("C001")) {
            sqlcode = 0;
            wsCliNome = "Mario";
            wsCliCognome = "Rossi";
        } else {
            sqlcode = 100; // Not found
        }

        // ASG: ifStatement (controllo esito query)
        if (sqlcode == 100) {
            System.out.println("Cliente non trovato!");
            return;
        } else if (sqlcode != 0) {
            System.out.println("Errore database: " + sqlcode);
            return;
        }

        System.out.println("Cliente: " + wsCliNome + " " + wsCliCognome);
        generaNumeroConto();

        System.out.print("Tipo conto (C=Corrente, D=Deposito): ");
        wsConTipo = scanner.nextLine().toUpperCase();
        System.out.print("Importo iniziale: ");
        wsConSaldo = new BigDecimal(scanner.nextLine());
        System.out.print("Fido accordato: ");
        wsConFido = new BigDecimal(scanner.nextLine());

        // ASG: moveStatement. Interpretato come "data odierna".
        wsConDataApertura = LocalDate.now().format(DateTimeFormatter.ISO_LOCAL_DATE);
        wsConStato = "A"; // 'A' per Attivo

        // ASG: execSqlStatement (INSERT nuovo conto)
        // Simulazione: l'inserimento va sempre a buon fine.
        sqlcode = 0;

        // ASG: ifStatement (controllo esito insert)
        if (sqlcode == 0) {
            System.out.println("Conto " + wsConNumero + " creato con successo!");
            // Se c'è un deposito iniziale, va registrato come movimento.
            if (wsConSaldo.compareTo(BigDecimal.ZERO) > 0) {
                wsMovTipo = "D";
                wsMovCausale = "Deposito iniziale";
                wsMovImporto = wsConSaldo;
                // wsConNumero è già impostato da generaNumeroConto
                registraMovimento();
            }
        } else {
            System.out.println("Errore creazione conto: " + sqlcode);
        }
    }

    /**
     * Simula la generazione di un nuovo numero di conto, ad esempio da una sequence del DB.
     */
    private void generaNumeroConto() {
        // ASG: execSqlStatement (SELECT da una sequence)
        // Simulazione: generiamo un numero casuale.
        long randomNum = (long) (Math.random() * 1000000000L) + 1000000000L;
        wsConNumero = "IT" + randomNum;
    }

    /**
     * Gestisce la logica per effettuare un deposito su un conto esistente.
     */
    private void deposito() {
        System.out.println(" ");
        System.out.println("=== DEPOSITO ===");
        System.out.print("Numero conto: ");
        String numeroConto = scanner.nextLine();

        verificaConto(numeroConto);
        // ASG: ifStatement (wsEsito = 'OK')
        if ("OK".equals(wsEsito)) {
            System.out.print("Importo deposito: ");
            BigDecimal importo = new BigDecimal(scanner.nextLine());

            // ASG: ifStatement (controllo importo > 0)
            if (importo.compareTo(BigDecimal.ZERO) <= 0) {
                System.out.println("Importo non valido!");
                return;
            }

            System.out.print("Causale: ");
            wsMovCausale = scanner.nextLine();

            // ASG: execSqlStatement (UPDATE saldo)
            // Simulazione: aggiorniamo il saldo e impostiamo sqlcode.
            wsConSaldo = wsConSaldo.add(importo);
            sqlcode = 0;

            // ASG: ifStatement (controllo esito update)
            if (sqlcode == 0) {
                wsMovTipo = "D";
                wsMovImporto = importo;
                registraMovimento();
                System.out.println("Deposito effettuato con successo!");
            } else {
                System.out.println("Errore durante il deposito: " + sqlcode);
            }
        }
    }

    /**
     * Gestisce la logica per effettuare un prelievo da un conto esistente.
     */
    private void prelievo() {
        System.out.println(" ");
        System.out.println("=== PRELIEVO ===");
        System.out.print("Numero conto: ");
        String numeroConto = scanner.nextLine();

        verificaConto(numeroConto);
        // ASG: ifStatement (wsEsito = 'OK')
        if ("OK".equals(wsEsito)) {
            System.out.print("Importo prelievo: ");
            BigDecimal importo = new BigDecimal(scanner.nextLine());

            if (importo.compareTo(BigDecimal.ZERO) <= 0) {
                System.out.println("Importo non valido!");
                return;
            }

            // ASG: execSqlStatement + ifStatement (controllo fondi)
            // Simulazione: verifichiamo la disponibilità (saldo + fido)
            if (wsConSaldo.add(wsConFido).compareTo(importo) < 0) {
                System.out.println("Fondi insufficienti!");
                System.out.println("Saldo attuale: " + wsConSaldo);
                System.out.println("Fido disponibile: " + wsConFido);
                return;
            }

            System.out.print("Causale: ");
            wsMovCausale = scanner.nextLine();

            // ASG: execSqlStatement (UPDATE saldo)
            // Simulazione: aggiorniamo il saldo e impostiamo sqlcode.
            wsConSaldo = wsConSaldo.subtract(importo);
            sqlcode = 0;

            // ASG: ifStatement (controllo esito update)
            if (sqlcode == 0) {
                wsMovTipo = "P";
                wsMovImporto = importo;
                registraMovimento();
                System.out.println("Prelievo effettuato con successo!");
            } else {