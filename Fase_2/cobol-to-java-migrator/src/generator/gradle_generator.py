"""
Gradle Generator - Genera la configurazione Gradle per il progetto Java
"""

from typing import Dict, List, Any
from loguru import logger


class GradleGenerator:
    """Genera i file di configurazione Gradle per il progetto migrato"""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.spring_version = config.get('spring', {}).get('version', '2.7.0')
        self.java_version = config.get('migration', {}).get('target_java_version', '11')
        
    def generate(self, java_project: Dict[str, Any]) -> List[Dict[str, Any]]:
        """Genera tutti i file Gradle necessari"""
        logger.info("Generazione configurazione Gradle")
        
        gradle_files = []
        
        # 1. build.gradle principale
        build_gradle = self._generate_build_gradle(java_project)
        gradle_files.append({
            'filename': 'build.gradle',
            'content': build_gradle
        })
        
        # 2. settings.gradle
        settings_gradle = self._generate_settings_gradle(java_project)
        gradle_files.append({
            'filename': 'settings.gradle',
            'content': settings_gradle
        })
        
        # 3. gradle.properties
        gradle_properties = self._generate_gradle_properties()
        gradle_files.append({
            'filename': 'gradle.properties',
            'content': gradle_properties
        })
        
        # 4. gradlew wrapper scripts
        gradle_wrapper_props = self._generate_gradle_wrapper_properties()
        gradle_files.append({
            'filename': 'gradle/wrapper/gradle-wrapper.properties',
            'content': gradle_wrapper_props
        })
        
        # 5. gradlew script (Unix)
        gradlew_script = self._generate_gradlew_script()
        gradle_files.append({
            'filename': 'gradlew',
            'content': gradlew_script,
            'executable': True
        })
        
        # 6. gradlew.bat script (Windows)
        gradlew_bat = self._generate_gradlew_bat()
        gradle_files.append({
            'filename': 'gradlew.bat',
            'content': gradlew_bat
        })
        
        logger.info(f"Generati {len(gradle_files)} file Gradle")
        
        return gradle_files
    
    def _generate_build_gradle(self, java_project: Dict[str, Any]) -> str:
        """Genera il file build.gradle principale"""
        
        # Determina le dipendenze
        dependencies = self._get_dependencies(java_project)
        
        # Plugin da applicare
        plugins = self._get_plugins()
        
        # Repositories
        repositories = self._get_repositories()
        
        content = f"""// Build configuration for {java_project.get('project_name', 'migrated-app')}
// Generated by COBOL to Java Migration Tool

{plugins}

group = '{java_project.get('package_base', 'com.migrated.app')}'
version = '1.0.0'
sourceCompatibility = '{self.java_version}'

configurations {{
    compileOnly {{
        extendsFrom annotationProcessor
    }}
}}

{repositories}

{dependencies}

// Task configurations
tasks.named('test') {{
    useJUnitPlatform()
}}

// JAR configuration
jar {{
    enabled = false
}}

bootJar {{
    archiveBaseName = '{java_project.get('project_name', 'migrated-app')}'
    archiveVersion = '${{version}}'
}}

// Configurazione encoding
tasks.withType(JavaCompile) {{
    options.encoding = 'UTF-8'
}}

// Task personalizzati
task cleanGenerated(type: Delete) {{
    delete fileTree(dir: 'src/main/java', include: '**/generated/**')
}}

// Configurazione test
test {{
    testLogging {{
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }}
}}

// Configurazione Spring Boot DevTools per sviluppo
bootRun {{
    sourceResources sourceSets.main
    systemProperty 'spring.profiles.active', 'dev'
}}

// Task per generare la documentazione
task generateDocs {{
    doLast {{
        println 'Generazione documentazione...'
        // TODO: Aggiungere generazione JavaDoc
    }}
}}

// Informazioni build
task buildInfo {{
    doLast {{
        println "="*50
        println "Project: ${{project.name}}"
        println "Version: ${{project.version}}"
        println "Java Version: ${{sourceCompatibility}}"
        println "Spring Boot Version: {self.spring_version}"
        println "="*50
    }}
}}

// Hook per CI/CD
task ciCheck {{
    dependsOn clean, test, check
}}

// Configurazione per generare report coverage (se usi JaCoCo)
/*
jacoco {{
    toolVersion = "0.8.7"
}}

jacocoTestReport {{
    reports {{
        xml.enabled true
        html.enabled true
    }}
}}
*/

// Configurazione Checkstyle (opzionale)
/*
checkstyle {{
    toolVersion = '8.45'
    configFile = file("${{rootDir}}/config/checkstyle/checkstyle.xml")
}}
*/
"""
        
        return content
    
    def _get_plugins(self) -> str:
        """Genera la sezione plugins"""
        return f"""plugins {{
    id 'java'
    id 'org.springframework.boot' version '{self.spring_version}'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    // Plugin opzionali
    // id 'jacoco'  // Per code coverage
    // id 'checkstyle'  // Per controllo stile codice
    // id 'com.github.spotbugs' version '5.0.6'  // Per analisi statica
}}"""
    
    def _get_repositories(self) -> str:
        """Genera la sezione repositories"""
        return """repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    // Repository aggiuntivi se necessari
    // maven { url 'https://repository.jboss.org/nexus/content/repositories/releases' }
}"""
    
    def _get_dependencies(self, java_project: Dict[str, Any]) -> str:
        """Genera la sezione dependencies"""
        deps = java_project.get('dependencies', [])
        
        # Dipendenze base Spring Boot
        base_deps = [
            "implementation 'org.springframework.boot:spring-boot-starter-web'",
            "implementation 'org.springframework.boot:spring-boot-starter-data-jpa'",
            "implementation 'org.springframework.boot:spring-boot-starter-validation'",
            "implementation 'org.springframework.boot:spring-boot-starter-actuator'",
            "developmentOnly 'org.springframework.boot:spring-boot-devtools'",
            "testImplementation 'org.springframework.boot:spring-boot-starter-test'"
        ]
        
        # Database
        db_deps = [
            "runtimeOnly 'org.postgresql:postgresql'",
            "// runtimeOnly 'mysql:mysql-connector-java'  // Alternativa MySQL",
            "// runtimeOnly 'com.h2database:h2'  // Per test"
        ]
        
        # Lombok
        lombok_deps = []
        if self.config.get('java', {}).get('use_lombok', True):
            lombok_deps = [
                "compileOnly 'org.projectlombok:lombok'",
                "annotationProcessor 'org.projectlombok:lombok'"
            ]
        
        # Utility
        utility_deps = [
            "implementation 'org.apache.commons:commons-lang3:3.12.0'",
            "implementation 'com.google.guava:guava:31.1-jre'",
            "implementation 'org.modelmapper:modelmapper:3.1.0'  // Per mapping DTO"
        ]
        
        # Logging
        logging_deps = [
            "implementation 'net.logstash.logback:logstash-logback-encoder:7.2'  // Per logging JSON"
        ]
        
        # Security (opzionale)
        security_deps = [
            "// implementation 'org.springframework.boot:spring-boot-starter-security'",
            "// implementation 'io.jsonwebtoken:jjwt-api:0.11.5'",
            "// runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'",
            "// runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'"
        ]
        
        # API Documentation
        doc_deps = [
            "implementation 'org.springdoc:springdoc-openapi-ui:1.6.9'  // OpenAPI 3.0"
        ]
        
        # Test dependencies
        test_deps = [
            "testImplementation 'org.junit.jupiter:junit-jupiter'",
            "testImplementation 'org.mockito:mockito-core'",
            "testImplementation 'org.assertj:assertj-core'",
            "testImplementation 'com.h2database:h2'  // Database in-memory per test",
            "testImplementation 'org.testcontainers:testcontainers:1.17.3'  // Per test con container",
            "testImplementation 'org.testcontainers:postgresql:1.17.3'"
        ]
        
        # Monitoring e metriche
        monitoring_deps = [
            "implementation 'io.micrometer:micrometer-registry-prometheus'  // Metriche Prometheus",
            "// implementation 'io.sentry:sentry-spring-boot-starter:6.3.0'  // Error tracking"
        ]
        
        # Componi tutte le dipendenze
        all_deps = []
        all_deps.extend(base_deps)
        all_deps.append("")  # Linea vuota
        all_deps.append("    // Database")
        all_deps.extend(db_deps)
        all_deps.append("")
        
        if lombok_deps:
            all_deps.append("    // Lombok")
            all_deps.extend(lombok_deps)
            all_deps.append("")
        
        all_deps.append("    // Utilities")
        all_deps.extend(utility_deps)
        all_deps.append("")
        
        all_deps.append("    // Logging")
        all_deps.extend(logging_deps)
        all_deps.append("")
        
        all_deps.append("    // Security (decommentare se necessario)")
        all_deps.extend(security_deps)
        all_deps.append("")
        
        all_deps.append("    // API Documentation")
        all_deps.extend(doc_deps)
        all_deps.append("")
        
        all_deps.append("    // Test")
        all_deps.extend(test_deps)
        all_deps.append("")
        
        all_deps.append("    // Monitoring")
        all_deps.extend(monitoring_deps)
        
        # Formatta come stringa
        deps_str = "dependencies {\n"
        for dep in all_deps:
            deps_str += f"    {dep}\n"
        deps_str += "}"
        
        return deps_str
    
    def _generate_settings_gradle(self, java_project: Dict[str, Any]) -> str:
        """Genera il file settings.gradle"""
        project_name = java_project.get('project_name', 'migrated-app')
        
        return f"""// Settings for {project_name}
// Generated by COBOL to Java Migration Tool

rootProject.name = '{project_name}'

// Configurazione plugin management
pluginManagement {{
    repositories {{
        maven {{ url 'https://repo.spring.io/milestone' }}
        gradlePluginPortal()
    }}
}}

// Configurazione per multi-modulo (se necessario in futuro)
// include 'common'
// include 'api'
// include 'service'

// Abilita la nuova configurazione Gradle
enableFeaturePreview('VERSION_CATALOGS')
"""
    
    def _generate_gradle_properties(self) -> str:
        """Genera il file gradle.properties"""
        return f"""# Gradle properties
# Generated by COBOL to Java Migration Tool

# Versione Gradle
org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8
org.gradle.parallel=true
org.gradle.caching=true
org.gradle.daemon=true

# Versioni
javaVersion={self.java_version}
springBootVersion={self.spring_version}
springCloudVersion=2021.0.3

# Configurazione build
systemProp.file.encoding=UTF-8
kotlin.incremental=false

# Repository privati (se necessario)
# mavenRepoUrl=https://nexus.company.com/repository/maven-public/
# mavenRepoUsername=user
# mavenRepoPassword=password

# Proxy settings (se necessario)
# systemProp.http.proxyHost=proxy.company.com
# systemProp.http.proxyPort=8080
# systemProp.https.proxyHost=proxy.company.com
# systemProp.https.proxyPort=8080

# Abilita build scan (opzionale)
# org.gradle.scan.termsOfService=yes
"""
    
    def _generate_gradle_wrapper_properties(self) -> str:
        """Genera gradle-wrapper.properties"""
        return """# Gradle Wrapper properties
# Generated by COBOL to Java Migration Tool

distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\\://services.gradle.org/distributions/gradle-7.6.1-bin.zip
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists

# Checksum per verifica integrità
distributionSha256Sum=7ba68c54029790ab444b39d7e293d3236b2632631fb5f2e012bb28b4ff669e4b
"""
    
    def _generate_gradlew_script(self) -> str:
        """Genera lo script gradlew per Unix/Linux/macOS"""
        return '''#!/usr/bin/env sh

#
# Copyright 2015 the original author or authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

##############################################################################
##
##  Gradle start up script for UN*X
##  Generated by COBOL to Java Migration Tool
##
##############################################################################

# Attempt to set APP_HOME
# Resolve links: $0 may be a link
PRG="$0"
# Need this for relative symlinks.
while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \\(.*\\)$'`
    if expr "$link" : '/.*' > /dev/null; then
        PRG="$link"
    else
        PRG=`dirname "$PRG"`"/$link"
    fi
done
SAVED="`pwd`"
cd "`dirname \\"$PRG\\"`/" >/dev/null
APP_HOME="`pwd -P`"
cd "$SAVED" >/dev/null

APP_NAME="Gradle"
APP_BASE_NAME=`basename "$0"`

# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD="maximum"

warn () {
    echo "$*"
}

die () {
    echo
    echo "$*"
    echo
    exit 1
}

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "`uname`" in
  CYGWIN* )
    cygwin=true
    ;;
  Darwin* )
    darwin=true
    ;;
  MSYS* | MINGW* )
    msys=true
    ;;
  NONSTOP* )
    nonstop=true
    ;;
esac

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD="$JAVA_HOME/jre/sh/java"
    else
        JAVACMD="$JAVA_HOME/bin/java"
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD="java"
    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
fi

# Increase the maximum file descriptors if we can.
if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
    MAX_FD_LIMIT=`ulimit -H -n`
    if [ $? -eq 0 ] ; then
        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
            MAX_FD="$MAX_FD_LIMIT"
        fi
        ulimit -n $MAX_FD
        if [ $? -ne 0 ] ; then
            warn "Could not set maximum file descriptor limit: $MAX_FD"
        fi
    else
        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
    fi
fi

# For Darwin, add options to specify how the application appears in the dock
if $darwin; then
    GRADLE_OPTS="$GRADLE_OPTS \\"-Xdock:name=$APP_NAME\\" \\"-Xdock:icon=$APP_HOME/media/gradle.icns\\""
fi

# For Cygwin or MSYS, switch paths to Windows format before running java
if [ "$cygwin" = "true" -o "$msys" = "true" ] ; then
    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`

    JAVACMD=`cygpath --unix "$JAVACMD"`

    # We build the pattern for arguments to be converted via cygpath
    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
    SEP=""
    for dir in $ROOTDIRSRAW ; do
        ROOTDIRS="$ROOTDIRS$SEP$dir"
        SEP="|"
    done
    OURCYGPATTERN="(^($ROOTDIRS))"
    # Add a user-defined pattern to the cygpath arguments
    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
    fi
    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    i=0
    for arg in "$@" ; do
        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option

        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
        else
            eval `echo args$i`="\\"$arg\\""
        fi
        i=`expr $i + 1`
    done
    case $i in
        0) set -- ;;
        1) set -- "$args0" ;;
        2) set -- "$args0" "$args1" ;;
        3) set -- "$args0" "$args1" "$args2" ;;
        4) set -- "$args0" "$args1" "$args2" "$args3" ;;
        5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
        6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
        7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
        8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
        9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
    esac
fi

# Escape application args
save () {
    for i do printf %s\\\\n "$i" | sed "s/'/'\\\\\\\\''/g;1s/^/'/;\\$s/\\$/'/" ; done
    echo " "
}
APP_ARGS=`save "$@"`

# Collect all arguments for the java command, following the shell quoting and substitution rules
eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\\"-Dorg.gradle.appname=$APP_BASE_NAME\\"" -classpath "\\"$CLASSPATH\\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"

exec "$JAVACMD" "$@"
'''
    
    def _generate_gradlew_bat(self) -> str:
        """Genera lo script gradlew.bat per Windows"""
        return '''@rem
@rem Copyright 2015 the original author or authors.
@rem
@rem Licensed under the Apache License, Version 2.0 (the "License");
@rem you may not use this file except in compliance with the License.
@rem You may obtain a copy of the License at
@rem
@rem      https://www.apache.org/licenses/LICENSE-2.0
@rem
@rem Unless required by applicable law or agreed to in writing, software
@rem distributed under the License is distributed on an "AS IS" BASIS,
@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@rem See the License for the specific language governing permissions and
@rem limitations under the License.
@rem
@rem Generated by COBOL to Java Migration Tool

@if "%DEBUG%" == "" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

set DIRNAME=%~dp0
if "%DIRNAME%" == "" set DIRNAME=.
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Resolve any "." and ".." in APP_HOME to make it shorter.
for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if "%ERRORLEVEL%" == "0" goto execute

echo.
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto execute

echo.
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:execute
@rem Setup the command line

set CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar


@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*

:end
@rem End local scope for the variables with windows NT shell
if "%ERRORLEVEL%"=="0" goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
exit /b 1

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega
'''