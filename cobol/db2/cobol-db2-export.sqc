       IDENTIFICATION DIVISION.
       PROGRAM-ID. DB2-EXPORT.
       
       ENVIRONMENT DIVISION.
      * IMPUT SECTION - prende come output il file di dipendentiReport.dat
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT OUTPUT-FILE ASSIGN TO '../../data/dipendentiReport.dat'
           ORGANIZATION IS LINE SEQUENTIAL.
      * FILE SECTION - definisce la struttura del file di output
       DATA DIVISION.
       FILE SECTION.
       FD OUTPUT-FILE.
       01 EMPLOYEE-OUTPUT-RECORD.
           05 EMP-ID-OUT       PIC 9(5).
      *    Il filler è a zero
           05 FILLER           PIC X VALUE SPACE.
      *    Il nome può essere lungo fino a 30 caratteri
           05 EMP-NAME-OUT     PIC X(30).
      *    La posizione può essere lunga fino a 20 caratteri
           05 EMP-POSITION-OUT PIC X(20).
      *    Lo stipendio è un numero a 5 cifre significative, 
      *    con zeri iniziali non contanti, e 2 decimali
           05 EMP-SALARY-OUT   PIC Z(5)9.99.
      *    Il filler è a zero
           05 FILLER           PIC X VALUE SPACE.
      *    Il dipartimento può essere lungo fino a 15 caratteri
           05 EMP-DEPT-OUT     PIC X(15).
       
       WORKING-STORAGE SECTION.

      ******************************************************************
      *                 SQL COMMMUNICATION AREA                        *
      ******************************************************************
           EXEC SQL INCLUDE SQLCA END-EXEC.

      ******************************************************************
      *                            COPY UT61IF                         * 
      ******************************************************************
           EXEC SQL INCLUDE UT61IF END-EXEC.

      ******************************************************************
      *            AREA DELLE CONDIZIONI DI WHERE CONDITION            *
      ******************************************************************
      


      * Definizione delle variabili per la connessione al DB2
      * e per la gestione del cursore
      * Sezione per la definizione delle variabili SQL - 
      * in questo caso lavora sono in tabella dipendenti
       EXEC SQL BEGIN DECLARE SECTION END-EXEC.

       01 DBNAME             PIC X(8) VALUE "DIPDB".
       01 USERNAME           PIC X(20) VALUE "db2inst1".
       01 PASSWD             PIC X(20) VALUE "password".
       
       01 ID-DIPENDENTE      PIC 9(5).
       01 NOME-DIPENDENTE    PIC X(30).
       01 NOME-POSIZIONE     PIC X(20).
      * 6 cifre intere, e due decimali con virgola virtuale
      * ha la stessa gamma di valori (9-2 qui e 5+2 in file section)
       01 STIPENDIO-BASE     PIC 9(6)V99.
       01 NOME-DIPARTIMENTO  PIC X(15).
      * S sta per Segno (può essre + o -)
      * leading: il segno appare all'inizio del valore
      * separate: il segno occupa una posizione separata 
      * nel campo (non sovrapposto a una cifra)
       01 SQLCODE-DISPLAY    PIC S9(9) SIGN LEADING SEPARATE.

       EXEC SQL END DECLARE SECTION END-EXEC.
              
       01 WS-EOF             PIC A(1) VALUE 'N'.
       01 WS-COUNTER         PIC 9(3) VALUE 0.
      * CURSORE
      *    permette elaborazione dati senza caricare tutti in memoria
      *    elaborazione sequenziale
      *    si può interrompere il flusso in qualsiasi momento
      * definizione del cursore per l'esportazione dei dati
      * può essere spostato attraverso i risultati di una query
      * 1. definizione del nome (export-cursor) e associazione 
      * alla query
      * 2. specifica dati da recuperare tramite il cursore
      * 3. definizione delle relazioni tra le tabelle tramite join
      * 4. ordinamento risultati tramite ORDER BY
       EXEC SQL DECLARE EXPORT-CURSOR CURSOR FOR
           SELECT 
               D.ID_DIPENDENTE, 
               D.NOME, 
               P.NOME_POSIZIONE, 
               P.STIPENDIO_BASE, 
               DPT.NOME_DIPARTIMENTO
           FROM 
               DIPENDENTI D
               JOIN POSIZIONI P ON D.ID_POSIZIONE = P.ID_POSIZIONE
               JOIN DIPARTIMENTI DPT ON P.ID_DIPARTIMENTO = DPT.ID_DIPARTIMENTO
           ORDER BY 
               D.ID_DIPENDENTE
       END-EXEC.
       
       PROCEDURE DIVISION.
       MAIN-PARAGRAPH.
           DISPLAY "Inizio esportazione dati da DB2".
           
           PERFORM DB-CONNECT.
           
           IF SQLCODE = 0
               OPEN OUTPUT OUTPUT-FILE
               
               PERFORM OPEN-CURSOR
               
               IF SQLCODE = 0
                   PERFORM FETCH-AND-WRITE UNTIL SQLCODE <> 0
                   
                   PERFORM CLOSE-CURSOR
               END-IF
               
               CLOSE OUTPUT-FILE
           END-IF.
           
           PERFORM DB-DISCONNECT.
           
           DISPLAY "Esportazione completata."
           DISPLAY "Record esportati: " WS-COUNTER.
           DISPLAY "Dati salvati in dipendentiReport.dat"
           STOP RUN.
       
       DB-CONNECT.
           EXEC SQL
               CONNECT TO :DBNAME USER :USERNAME USING :PASSWD
           END-EXEC.
           
           IF SQLCODE NOT = 0
               MOVE SQLCODE TO SQLCODE-DISPLAY
               DISPLAY "Errore connessione DB2: " SQLCODE-DISPLAY
               DISPLAY SQLERRMC
           ELSE
               DISPLAY "Connessione a DB2 eseguita con successo"
           END-IF.
       
       DB-DISCONNECT.
           EXEC SQL
               CONNECT RESET
           END-EXEC.
           
           IF SQLCODE NOT = 0
               MOVE SQLCODE TO SQLCODE-DISPLAY
               DISPLAY "Errore disconnessione: " SQLCODE-DISPLAY
           ELSE
               DISPLAY "Disconnessione eseguita con successo"
           END-IF.
       
       OPEN-CURSOR.
           EXEC SQL
               OPEN EXPORT-CURSOR
           END-EXEC.
           
           IF SQLCODE NOT = 0
               MOVE SQLCODE TO SQLCODE-DISPLAY
               DISPLAY "Errore apertura cursor: " SQLCODE-DISPLAY
           END-IF.
       
       CLOSE-CURSOR.
           EXEC SQL
               CLOSE EXPORT-CURSOR
           END-EXEC.
           
           IF SQLCODE NOT = 0
               MOVE SQLCODE TO SQLCODE-DISPLAY
               DISPLAY "Errore chiusura cursor: " SQLCODE-DISPLAY
           END-IF.
       
       FETCH-AND-WRITE.
           EXEC SQL
               FETCH EXPORT-CURSOR INTO
                   :ID-DIPENDENTE,
                   :NOME-DIPENDENTE,
                   :NOME-POSIZIONE,
                   :STIPENDIO-BASE,
                   :NOME-DIPARTIMENTO
           END-EXEC.
           
           IF SQLCODE = 0
               ADD 1 TO WS-COUNTER
               
               MOVE ID-DIPENDENTE TO EMP-ID-OUT
               MOVE NOME-DIPENDENTE TO EMP-NAME-OUT
               MOVE NOME-POSIZIONE TO EMP-POSITION-OUT
               MOVE STIPENDIO-BASE TO EMP-SALARY-OUT
               MOVE NOME-DIPARTIMENTO TO EMP-DEPT-OUT
               
               WRITE EMPLOYEE-OUTPUT-RECORD
               
               DISPLAY "Esportato: " NOME-DIPENDENTE
           ELSE
               IF SQLCODE <> 100
                   MOVE SQLCODE TO SQLCODE-DISPLAY
                   DISPLAY "Errore fetch: " SQLCODE-DISPLAY
               END-IF
           END-IF.
